import _ from 'mudash'
import ignore from 'ignore'
import { obj } from 'through2'
import { File, PluginError } from 'gulp-util'
import { basename, dirname, extname, relative, resolve, sep } from 'path'
import fileStat from './fileStat'

const { parse, stringify } = JSON
const PLUGIN_NAME = 'gulp-moltres'
const HEADER_TEMPLATE = () =>
  `//DO NOT MODIFY - This file is auto generated by moltres\n`

const REQUIRE_TEMPLATE = ({ name }) =>
  `const ${name} = require('./${name}')\n`

const EXPORTS_TEMPLATE = ({exports}) =>
`export {
${_.join(exports, ',\n')}
}`

const EXPORT_TEMPLATE = ({name}) => `  ${name}`


function install(options) {
  const ignorer = options.ignore ? ignore().add(options.ignore) : null
  let moduleMap = {}
  let targets = {}
  function doScan(file, enc, done) {
    if (file.isNull() || file.moltres) {
      this.push(file)
      return done()
    }

    if (file.isStream()) {
      return done(new PluginError(PLUGIN_NAME, 'Streaming not supported'))
    }

    try {
      const fileType = extname(file.path)
      if (fileType === '.json') {
        scanJson(file)
      }
    } catch (err) {
      this.emit('error', new PluginError(PLUGIN_NAME, err, {
        fileName: file.path,
        showProperties: false
      }))
    }

    done()
  }

  function doInstall(done) {
    try {
      _.each(targets, (target) => {
        installMoltres(target, this)
      })
      return done()
    } catch (error) {
      return done(new PluginError(PLUGIN_NAME, error))
    }
  }


  function installMoltres(target, stream) {
    const targetPath = dirname(target.path)
    const { data } = target
    let installedModules = {}

    if (data.dependencies) {
      installDependencies(data.dependencies)
    }
    _.each(installedModules, (types, namespace) => {
      _.each(types, (names, type) => {
        let cwd
        let base
        let indexContents = HEADER_TEMPLATE()
        let exports = []
        _.each(names, (installedModule, name) => {
          indexContents += REQUIRE_TEMPLATE(installedModule.data)
          exports = _.push(exports, EXPORT_TEMPLATE(installedModule.data))
          const installedPath = dirname(installedModule.path)
          const modulePath = resolve(targetPath, `node_modules/@${namespace}/${type}/${name}`)
          const moduleContents = buildModuleContents(installedPath, modulePath)
          cwd = installedModule.cwd
          base = installedModule.base
          stream.push(createFile(
            cwd,
            base,
            relative(cwd, resolve(modulePath, 'index.js')),
            moduleContents
          ))
        })

        indexContents += EXPORTS_TEMPLATE({exports})
        const indexPath = resolve(targetPath, `node_modules/@${namespace}/${type}`)
        stream.push(createFile(
          cwd,
          base,
          relative(cwd, resolve(indexPath, 'index.js')),
          indexContents
        ))

        stream.push(createFile(
          cwd,
          base,
          relative(cwd, resolve(indexPath, 'package.json')),
          stringify({
            name: `@${namespace}/${type}`
          })
        ))
      })
    })


    function installDependencies(dependencies) {
      _.each(dependencies, (depSet, type) => {
        if (type !== 'npm') { //hack, add this functionality later
          _.each(depSet, (version, name) => {
            installModule('moltres', type, name)
          })
        }
      })
    }

    function installModule(namespace, type, name) {
      if (!_.has(installedModules, modulePropPath(namespace, type, name))) {
        const module = _.get(moduleMap, modulePropPath(namespace, type, name))
        if (module) {
          installedModules = _.assoc(installedModules, {
            [modulePropPath(namespace, type, name)]: module
          })
          installDependencies(module.data.dependencies)
        } else {
          throw new Error(`Cannot find module ${type}:${name}`)
        }
      }
    }
  }

  function scanJson(file) {
    try {
      const fileContent = file.contents.toString()
      const fileName = basename(file.path)
      const data = parse(fileContent)
      const module = _.assoc({ data }, {
        path: unixStylePath(file.path),
        cwd: unixStylePath(file.cwd),
        base: unixStylePath(file.base)
      })
      if (fileName === 'moltres.json') {
        if (!_.isEmpty(ignorer.filter([file.path]))) {
          targets = _.assoc(targets, {
            [file.path.replace('.', ':')]: module
          })
        }
      } else {
        const { namespace, type, name } = data
        if (namespace === 'moltres') {
          file.moltres = module
          moduleMap = _.assoc(moduleMap, {
            [modulePropPath(namespace, type, name)]: module
          })
        }
      }
    } catch(error) {} //eslint-disable-line no-empty
  }

  return obj(doScan, doInstall)
}

function buildModuleContents(installedPath, modulePath) {
  return `module.exports = require('${relative(modulePath, installedPath)}')`
}

function unixStylePath(filePath) {
  return filePath.split(sep).join('/')
}

function modulePropPath(namespace, type, name) {
  return `${namespace}.${type}.${name}`
}

function createFile(cwd, base, path, contents) {
  return new File({
    cwd,
    base,
    path,
    contents: new Buffer(contents),
    stat: fileStat()
  })
}

export default {
  install
}
